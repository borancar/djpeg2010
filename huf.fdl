$option "vcd"

//Receives signed integer without the signbit
//Magnitude has a maximum value of 7
dp magnitude_dp( in v:ns(7); out mag:ns(3)){

	sfg do_always{
		mag = ( (v==0) ? 0 : (v[1:6] == 0 ? 1 : (v[2:6] == 0 ? 2 : (v[3:6] == 0 ? 3 : (v[4:6] == 0 ? 4 : (v[5:6] == 0 ? 5 : (v[6] == 0 ? 6 : 7)))))));
	}
}

hardwired magnitude_hw(magnitude_dp){ do_always;}

dp huf(in start_huf : ns(1); out fin_huf : ns(1);
		in do4_y1:tc(8); in do4_y2:tc(8);in do4_u:tc(8);in do4_v:tc(8); //Value of the pixel we read in buffer 4.
		out a4r_y1, a4r_y2, a4r_u, a4r_v : ns(6);//Adres of the data we want to read from buffer 4.
	  	out r4_y1, r4_y2, r4_u, r4_v  : ns(1); //Indicates which block we want to read from buffer 4.)
		out outen  : ns(1);//The data on the dataline is valid data.
          	out outval : ns(16);//Data for fdump !!!!
          	out outnb  : ns(5))//Nb of bits outval bevat !!!!
{
//in start_huf : ns(1); out fin_huf : ns(1);
//           in do4_y1, do4_y2, do4_u, do4_v : tc(XX);
//          out a4r_y1, a4r_y2, a4r_u, a4r_v : ns(XX);
//          out  r4_y1, r4_y2, r4_u, r4_v  : ns(1);
//          out outen  : ns(1);
//          out outval : ns(XX);
//          out outnb  : ns(7) 

	reg cnt:ns(7);// want gaat tot net iets meer als 64 tellen;
	reg pix:tc(8);
	reg level:tc(8);
	reg level2:tc(8);
	reg lpred:ns(8);
	reg y1:ns(1);
	reg y2:ns(1);
	reg u:ns(1);
	reg v:ns(1);
	reg run:ns(6);
	reg tablenb: ns(8);
	reg tablenb2: ns(8);
	reg e0: ns(16);
	reg e1: ns(7);
	reg write_next:ns(1);
	reg cnt_blok_16:ns(3);
	reg blok:ns(2);
	reg pred_y:tc(8);
	reg pred_u:tc(8);
	reg pred_v:tc(8);

	sig len:ns(4);
	sig pred:ns(8);

	lookup test1 : tc(8) ={45,24,21,4,-20,-4,-7,3,-4,-6,-1,6,2,6,7,0,-5,-1,-1,2,2,0,-2,-1,-1,0,0,-2,2,2,0,1,0,1,0,-1,2,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	lookup test : tc(8) = {45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//	lookup test : tc(8) = {-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	lookup test2 : tc(8) = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	lookup test3 : tc(8) = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	lookup test4 : tc(8) = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	lookup ldht_val : ns(9) = {0, 2, 3, 4, 5, 6, 14, 30, 62, 126, 254, 510};
	lookup ldht_nb : ns(4) = {2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9};
	lookup cdht_val : ns(11) = {0, 1, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046};
	lookup cdht_nb : ns(4) = {2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
	lookup laht_val : ns(16) = {0xA, 0x0, 0x1, 0x4, 0xB, 0x1A, 0x78, 0xF8, 0x3F6, 0xFF82, 0xFF83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC, 0x1B, 0x79, 0x1F6, 0x7F6, 0xFF84, 0xFF85, 0xFF86, 0xFF87, 0xFF88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xF9, 0x3F7, 0xFF4, 0xFF89, 0xFF8A, 0xFF8B, 0xFF8C, 0xFF8D, 0xFF8E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3A, 0x1F7, 0xFF5, 0xFF8F, 0xFF90, 0xFF91, 0xFF92, 0xFF93, 0xFF94, 0xFF95, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3B, 0x3F8, 0xFF96, 0xFF97, 0xFF98, 0xFF99, 0xFF9A, 0xFF9B, 0xFF9C, 0xFF9D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7A, 0x7F7, 0xFF9E, 0xFF9F, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA3, 0xFFA4, 0xFFA5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF6, 0xFFA6, 0xFFA7, 0xFFA8, 0xFFA9, 0xFFAA, 0xFFAB, 0xFFAC, 0xFFAD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFA, 0xFF7, 0xFFAE, 0xFFAF, 0xFFB0, 0xFFB1, 0xFFB2, 0xFFB3, 0xFFB4, 0xFFB5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F8, 0x7FC0, 0xFFB6, 0xFFB7, 0xFFB8, 0xFFB9, 0xFFBA, 0xFFBB, 0xFFBC, 0xFFBD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F9, 0xFFBE, 0xFFBF, 0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC4, 0xFFC5, 0xFFC6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1FA, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F9, 0xFFD0, 0xFFD1, 0xFFD2, 0xFFD3, 0xFFD4, 0xFFD5, 0xFFD6, 0xFFD7, 0xFFD8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3FA, 0xFFD9, 0xFFDA, 0xFFDB, 0xFFDC, 0xFFDD, 0xFFDE, 0xFFDF, 0xFFE0, 0xFFE1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F8, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE5, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFEB, 0xFFEC, 0xFFED, 0xFFEE, 0xFFEF, 0xFFF0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F9, 0xFFF5, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x0, 0x0, 0x0, 0x0, 0x0}; 
	lookup laht_nb : ns(5) = {4, 2, 2, 3, 4, 5, 7, 8, 10, 16, 16, 0, 0, 0, 0, 0, 0, 4, 5, 7, 9, 11, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 5, 8, 10, 12, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 6, 9, 12, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 6, 10, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 7, 12, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 8, 12, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 15, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0}
	lookup caht_val : ns(16) ={0x0, 0x1, 0x4, 0xA, 0x18, 0x19, 0x38, 0x78, 0x1F4, 0x3F6, 0xFF4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB, 0x39, 0xF6, 0x1F5, 0x7F6, 0xFF5, 0xFF88, 0xFF89, 0xFF8A, 0xFF8B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1A, 0xF7, 0x3F7, 0xFF6, 0x7FC2, 0xFF8C, 0xFF8D, 0xFF8E, 0xFF8F, 0xFF90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1B, 0xF8, 0x3F8, 0xFF7, 0xFF91, 0xFF92, 0xFF93, 0xFF94, 0xFF95, 0xFF96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3A, 0x1F6, 0xFF97, 0xFF98, 0xFF99, 0xFF9A, 0xFF9B, 0xFF9C, 0xFF9D, 0xFF9E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3B, 0x3F9, 0xFF9F, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA3, 0xFFA4, 0xFFA5, 0xFFA6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x79, 0x7F7, 0xFFA7, 0xFFA8, 0xFFA9, 0xFFAA, 0xFFAB, 0xFFAC, 0xFFAD, 0xFFAE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7A, 0x7F8, 0xFFAF, 0xFFB0, 0xFFB1, 0xFFB2, 0xFFB3, 0xFFB4, 0xFFB5, 0xFFB6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF9, 0xFFB7, 0xFFB8, 0xFFB9, 0xFFBA, 0xFFBB, 0xFFBC, 0xFFBD, 0xFFBE, 0xFFBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F7, 0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC4, 0xFFC5, 0xFFC6, 0xFFC7, 0xFFC8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF, 0xFFD0, 0xFFD1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F9, 0xFFD2, 0xFFD3, 0xFFD4, 0xFFD5, 0xFFD6, 0xFFD7, 0xFFD8, 0xFFD9, 0xFFDA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1FA, 0xFFDB, 0xFFDC, 0xFFDD, 0xFFDE, 0xFFDF, 0xFFE0, 0xFFE1, 0xFFE2, 0xFFE3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F9, 0xFFE4, 0xFFE5, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEA, 0xFFEB, 0xFFEC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3FE0, 0xFFED, 0xFFEE, 0xFFEF, 0xFFF0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0xFFF5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3FA, 0x7FC3, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0x0, 0x0, 0x0, 0x0, 0x0};
	lookup caht_nb : ns(5) ={2, 2, 3, 4, 5, 5, 6, 7, 9, 10, 12, 0, 0, 0, 0, 0, 0, 4, 6, 8, 9, 11, 12, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 5, 8, 10, 12, 15, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 5, 8, 10, 12, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 6, 9, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 6, 10, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 10, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0};

// 	$trace(cnt,"cnt.txt");
// 	$trace(pix,"pix.txt");
// 	$trace(level,"level.txt");
// 	$trace(level2,"level2.txt");
// 	$trace(pred_y,"pred_y.txt");
// 	$trace(pred_u,"pred_u.txt");
// 	$trace(pred_v,"pred_v.txt");
// 	$trace(y1,"y1.txt");
// 	$trace(y2,"y2.txt");
// 	$trace(u,"u.txt");
// 	$trace(v,"v.txt");
// 	$trace(run,"run.txt");
// 	$trace(tablenb,"tablenb.txt");
// 	$trace(tablenb2,"tablenb2.txt");
// 	$trace(e0,"e0.txt");
// 	$trace(e1,"e1.txt");
// 	$trace(write_next,"write_next.txt");
// 	$trace(cnt_blok_16,"cnt_blok_16.txt");
// 	$trace(len,"len.txt");
// 	$trace(outen,"outen.txt");
// 	$trace(outval,"outval.txt");
// 	$trace(outnb,"outnb.txt");
// 	$trace(a4r_y1,"a4r_y1.txt");
// 	$trace(a4r_y2,"a4r_y2.txt");
// 	$trace(a4r_u,"a4r_u.txt");
// 	$trace(a4r_v,"a4r_v.txt");
// 	$trace(r4_y1,"r4_y1.txt");
// 	$trace(r4_y2,"r4_y2.txt");
// 	$trace(r4_u,"r4_u.txt");
// 	$trace(r4_v,"r4_v.txt");
// 	$trace(blok,"blok.txt");
// 	$trace(start_huf,"start_huf.txt");
// 	$trace(fin_huf,"fin_huf.txt");

	use magnitude_dp(level[0:6], len);

	sfg pred_init{
		pred_y = 0;
		pred_u = 0;
		pred_v = 0;
}

	sfg init{
		cnt = 0;
		run = 0;
//		y1 = (st_y1==1) ? 1 :0;
//		y2 = (st_y2==1) ? 1 :0;
//		u = (st_u==1) ? 1 :0;
//		v = (st_v==1) ? 1 :0;
		fin_huf = 0;
//		a4r_y1 = 0;
//		a4r_y2 = 0;
//		a4r_u = 0;
//		a4r_v = 0;
//		r4_y1 = 0;
//		r4_y2 = 0;
//		r4_u = 0;
//		r4_v = 0;
//		outen =0;
//		outval =0;
//		outnb = 0;
		cnt_blok_16 = 0;
	}

	sfg blok_init{
		blok == 0; // als we een start_huf krijgen --> blok op 0 zetten (BEN)

	}

	sfg blok_write{//je geeft een waarde aan y1, y2,... aan de hand van blok(BEN)
		y1 = (blok == 0) ? 1: 0; //y1 is hier dus altijd 1
		y2 = (blok == 1) ? 1: 0;
		u = (blok == 2) ? 1: 0; // schrijf hier NIET blok == 10 want dat ervaart hij als 10 en niet als 2!!!!
		v = (blok == 3) ? 1: 0;
	}

	sfg blok_plus{//je telt blok met 1 op//(BEN)
		blok = blok + 1;
	}

	sfg read{
		a4r_y1 = 0;
		a4r_y2 = 0;
		a4r_u = 0;
		a4r_v = 0;
		r4_y1 = 0;
		r4_y2 = 0;
		r4_u = 0;
		r4_v = 0;
		pix = ((y1 == 1) ? do4_y1 : (y2 == 1) ? do4_y2 : (u == 1) ? do4_u : do4_v);
//		pix = ((y1 == 1) ? test1(cnt) : (y2 == 1) ? test2(cnt) : (u == 1) ? test3(cnt) : test4(cnt));
//		pix = test(cnt);
	}

	sfg read_repair{
		a4r_y1 = cnt;
		a4r_y2 = cnt;
		a4r_u = cnt;
		a4r_v = cnt;
		r4_y1 = (y1==1) ? 1 :0;
		r4_y2 = (y2==1) ? 1 :0;
		r4_u = (u==1) ? 1 :0;
		r4_v = (v==1) ? 1 :0;
}

	sfg read_not{
		a4r_y1 = cnt;
		a4r_y2 = cnt;
		a4r_u = cnt;
		a4r_v = cnt;
		r4_y1 = (y1==1) ? 1 :0;
		r4_y2 = (y2==1) ? 1 :0;
		r4_u = (u==1) ? 1 :0;
		r4_v = (v==1) ? 1 :0;
//		a4r_y1 = 0;
//		a4r_y2 = 0;
//		a4r_u = 0;
//		a4r_v = 0;
//		r4_y1 = 0;
//		r4_y2 = 0;
//		r4_u = 0;
//		r4_v = 0;
	}

	sfg read_in{
		a4r_y1 = cnt+1;
		a4r_y2 = cnt+1;
		a4r_u = cnt+1;
		a4r_v = cnt+1;
		r4_y1 = (y1==1) ? 1 :0;
		r4_y2 = (y2==1) ? 1 :0;
		r4_u = (u==1) ? 1 :0;
		r4_v = (v==1) ? 1 :0;
//		a4r_y1 = 0;
//		a4r_y2 = 0;
//		a4r_u = 0;
//		a4r_v = 0;
//		r4_y1 = 0;
//		r4_y2 = 0;
//		r4_u = 0;
//		r4_v = 0;
	}

	sfg flags{
		fin_huf = 0;
	}
	sfg fin{
		fin_huf = 1;
	}

	sfg write_not{
		outen = 0;
		outval = 0;
		outnb = 0;
	} 

	sfg dc_tablenb{
		tablenb = len;
		tablenb2 = tablenb;
	}

	sfg init_dc{
		pred = ((y1 == 1)|(y2 == 1)) ? pred_y : (u == 1) ? pred_u :  pred_v;
		level = (pix >= 0) ? (pix - pred) : (128|(~(pix - pred + 1)));
		pred_y = (((y1 == 1)|(y2 == 1)) ? pix : pred_y); // kijk waar je de predictie in moet stoppen. (BEN)
		pred_u = (u == 1) ? pix : pred_u;
		pred_v = (v == 1) ? pix : pred_v;
	}

	sfg init_ac{
		level =(pix >= 0) ?  pix : (128 | (~(pix - 1 )));
		level2 = level;
	}
	sfg always_s2{
		cnt = cnt + 1;
		fin_huf = 0;
	}
	sfg table{
		e0 = ((cnt == 1) ? (((y1 == 1) | (y2 == 1)) ? ldht_val(tablenb) : cdht_val(tablenb)) : (((y1 == 1) | (y2 == 1)) ? laht_val(tablenb) : 				caht_val(tablenb)));
		e1 = ((cnt == 1) ? (((y1 == 1) | (y2 == 1)) ? ldht_nb(tablenb) : cdht_nb(tablenb)) : (((y1 == 1) | (y2 == 1)) ? laht_nb(tablenb) : 				caht_nb(tablenb)));
	}
	sfg ac_tablenb{
		tablenb = ((run << 4) | len);
		tablenb2 = tablenb[0:3];
		write_next = 1;
		run = 0;
	}
	sfg ac_0{
		run = run + 1;
		tablenb2 = tablenb[0:3];
		write_next = 0;
	}
	sfg ac_16{
		run = run -15;
		cnt_blok_16 = cnt_blok_16 + 1;
		write_next = 0;
		
	}
	sfg ac_end{
		tablenb2 = tablenb[0:3];
	}
	sfg write_end{
		outen = 1;
		outval = ((y1 == 1) | (y2 == 1)) ? laht_val(0) : caht_val(0);
		outnb = ((y1 == 1) | (y2 == 1)) ? laht_nb(0) : caht_nb(0);	
	}
	sfg write_0{
		outen = 1;//als je enablebit gewoon 1 zet ga je gewoon wegschrijven wat er in outval en outbits zit.
		outval =((y1 == 1) | (y2 == 1)) ? laht_val(16) : caht_val(16);
		outnb =((y1 == 1) | (y2 == 1)) ? laht_nb(16) : caht_nb(16);
		cnt_blok_16 = cnt_blok_16-1;
	}
	sfg write_1{
		outen = 1;//als je enablebit gewoon 1 zet ga je gewoon wegschrijven wat er in outval en outbits zit.
		outval = e0;
		outnb = e1;
	}
	sfg write_2{
		outen = 1;//als je enablebit gewoon 1 zet ga je gewoon wegschrijven wat er in outval en outbits zit.
		outval = (level2 > 0) ? level2 : ((~(level2[0:6]))&(~(127<<tablenb2)));//################################################################
		outnb = tablenb2;
	}
	sfg write{
		fin_huf = 0;
	}
	sfg no_out{
		fin_huf = 1;
		outen = 0;
		outval = 0;
		outnb = 0;
		a4r_y1 = 0;
		a4r_y2 = 0;
		a4r_u = 0;
		a4r_v = 0;
		r4_y1 = 0;
		r4_y2 = 0;
		r4_u = 0;
		r4_v = 0;
	}
	sfg disp{
		$display("Klok en count: ",$cycle,"  ",$dec, cnt,"  Readpix, level en level2:",pix," ",level," ",level2,"  eo, e1 en outval: ",e0," ",e1," ",outval," ", outen);
	}
	sfg disp1{
		$display("Klok en count: ",1," ",$cycle);
	}
	sfg disp2{
		$display("Klok en count: ",2," ",$cycle);
	}
	sfg disp3{
		$display("Klok en count: ",3," ",$cycle);
	}
	sfg disp4{
		$display("Klok en count: ",4," ",$cycle);
	}
	sfg disp5{
		$display("Klok en count: ",5," ",$cycle);
	}
	sfg disp6{
		$display("Klok en count: ",6," ",$cycle);
	}
	sfg disp7{
		$display("Klok en count: ",7," ",$cycle);
	}
}

fsm huf_fsm(huf){

	initial s0;
	state s1, s2, s3, s4, s5, s6, s7;

//	@s0 if(start_huf == 1) then (init, disp) ->s1;
//				else (no_out)  ->s0;

	@s0 (init, pred_init, write_not, read_not ,disp) ->s3;//

	@s1 if (cnt == 0)					then (read, 			write_not, flags, disp) ->s2;//
		else if(cnt == 1)				then (read, 	dc_tablenb, 	write_not, flags, disp)	->s2;//
		else if(cnt == 2 & level!=0)			then (read, 	ac_tablenb, 	write_not, flags, disp) 	->s4;//
		else if(cnt == 2)				then (read, 	ac_0, 		write_not, flags, disp) 	->s4;//
		else if(cnt == 64 & write_next & level!=0)	then (read_not, ac_tablenb, 	write_not, flags, disp)	->s4;
		else if(cnt == 64 & write_next)			then (read_not, ac_0,		write_not, flags, disp) 	->s4;
		else if(cnt == 64 & level != 0)			then (read_not, ac_tablenb, 	write_not, flags, disp1)	->s2;	
		else if(cnt == 64)				then (read_not, ac_0, 		write_not, flags, disp)	->s2;
		else if(cnt == 65 & write_next)			then (read_not, ac_end,		write_not, flags, disp3)	->s4;
		else if(cnt == 65)				then (read_not, 		write_not, flags, disp5)	->s4;
		else if(write_next & level!=0)			then (read, 	ac_tablenb, 	write_not, flags, disp) 	->s4;//
		else if(write_next)				then (read, 	ac_0, 		write_not, flags, disp) 	->s4;//
		else if(level != 0)				then (read, 	ac_tablenb, 	write_not, flags, disp) ->s2;//
		else if(run < 15)				then (read, 	ac_0, 		write_not, flags, disp) ->s2;//
								else (read, 	ac_16, 		write_not, flags, disp)	->s2;//

	@s2 if(cnt == 0)			then (read_in, init_dc, 	write_not, always_s2, disp) 	->s1;//
		else if(cnt == 1 & level ==0)   then (read_in, init_ac, 	write_not, always_s2, disp) 	->s1;//
		else if(cnt == 1)		then (read_in, init_ac, table, write_not, always_s2, disp) 	->s1;//
		else if(level == 0) 		then (read_in, init_ac, 	write_not, always_s2, disp) 	->s1;//
						else (read_in, init_ac, table, write_not, always_s2, disp2) 	->s1;//
	@s3 if(start_huf == 1) then (init, write_not, read_not, disp, blok_init, blok_write, blok_plus) 	->s7;
				else (no_out, disp)  ->s3;
	@s4 if(cnt == 65 & write_next==0)			then (read_not, write_end, write, disp) ->s6;
				else if(cnt_blok_16 > 0) 	then (read_not, write_0, write) 	->s4;//
				else(read_not, write_1, write, disp4) 	->s5;//
	@s5 if(cnt == 65)	then(read_not, write_2, write, disp5) 	->s6;
				else(read_not, write_2, write, disp) 	->s2;//
	@s6 if(blok == 0)	then(read_not, write_not, fin)		->s3;//(BEN)
				else(read_not, write_not, init, blok_write, blok_plus) ->s1;// je moet alles initialiseren en blok met 1 optellen voor de volgende keer(BEN)
	@s7 (read_in, write_not, flags, disp) ->s1;
}
