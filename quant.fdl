dp quantl( in start_quant : ns(1); 
           out fin_quant : ns(1);
           in  din : tc(15);

			out dout : tc(8);
			out rd3, wr4 : ns(1);
			out ad3, ad4 : ns(6)) 
{
	
reg i:ns(6);
reg fin:ns(1);
reg qi:ns(6);
reg wadr:ns(6);
reg x:tc(15);
reg y:tc(8);

reg start :ns(1);
always {start=start_quant;}

lookup lqt : ns(15) = {	256, 268, 313, 217, 170, 130, 148, 243,
						246, 177, 161, 132, 113,  64,  90, 194,
						223, 173, 149, 111,  78,  70,  83, 202,
						248, 147, 121, 102,  68,  50,  80, 203,
						227, 134,  84,  62,  60,  47,  73, 192,
						217, 107,  72,  69,  64,  63,  85, 205,
						154,  85,  74,  73,  73,  79, 116, 271,
						206, 116, 119, 128, 132, 188, 266, 543 };
							
sfg init
{
	i=0;
	fin=0;
	qi=0;
	wadr=0;
}

sfg next_block {
	i=0;
	qi=0;
	wadr=0;
}

sfg no_read {
	rd3=0;
	ad3=0;
}

sfg fin_no {
	fin_quant = 0;
}

sfg no_write {
	wr4=0;
	ad4=0;
	dout=0;
}

sfg prepare_read {
	ad3=i;
	i=i+1;
	rd3=1;
}

sfg calculate_c{
	y = (x*lqt(qi)) >> 15;
	$display($dp, " quant_out: ",y,",");
	qi = qi+1;
}

sfg fin_yes {
	fin=1;
	fin_quant = 1;
}

sfg clear_fin {
	fin=0;
}

sfg flag_fin {
	fin_quant=fin;
}

sfg read {
	x=din;
}

sfg write {
	ad4=wadr;
	wr4=1;
	wadr=wadr+1;
	dout=y;
}

}


fsm quantl_ctl(quantl) {
   	initial s0;
   	state s1,s2,s3,s4,s5,s6,s7,s8,s9;
   	@s0 (init,fin_no,no_write,no_read) -> s1;
	@s1 if(~start) then (no_read, no_write, flag_fin) -> s1;
  	    else (prepare_read, no_write, clear_fin, fin_no) -> s3;
 	@s3 (prepare_read, read, no_write, flag_fin) -> s4;
	@s4 (prepare_read, read, calculate_c, no_write, flag_fin) -> s5;
	@s5 if(i==0) then (no_read, read, calculate_c, write, flag_fin) -> s6;
		else (prepare_read, read, calculate_c, write, flag_fin) -> s5;
	@s6 (no_read, calculate_c, write, flag_fin) -> s7;
	@s7 (no_read, write, flag_fin) -> s8;
	@s8 (no_read, no_write, next_block, flag_fin) -> s9;
	@s9 (no_read, no_write, fin_yes) -> s1;

}
dp quanty1 : quantl
dp quanty2 : quantl

dp quantc ( in start_quant : ns(1); 
            out fin_quant : ns(1);
            in  din : tc(15);
			out dout : tc(8);
			out rd3, wr4 : ns(1);
			out ad3, ad4 : ns(6)) {
reg i:ns(6);
reg fin:ns(1);
reg qi:ns(6);
reg wadr:ns(6);
reg x:tc(15);
reg y:tc(8);

reg start :ns(1);
always {start=start_quant;}

lookup cqt : ns(15) ={	240, 164, 130,  74,  41,  52,  76, 149,
						164, 101,  86,  38,  29,  37,  55, 108,
						130,  86,  42,  26,  31,  40,  58, 114,
						 74,  38,  26,  29,  35,  44,  65, 127,
						 41,  29,  31,  35,  41,  52,  76, 149,
						 52,  37,  40,  44,  52,  67,  97, 190,
						 76,  55,  58,  65,  76,  97, 141, 277,
						149, 108, 114, 127, 149, 190, 277, 543 };

lookup zigzag: ns(6)=     {	 0,   8,  1,  2,  9, 16, 24, 17,
							10,   3,  4, 11, 18, 25, 32, 40,
							33,  26, 19, 12,  5,  6, 13, 20,
							27,  34, 41, 48, 56, 49, 42, 35,
							28,  21, 14,  7, 15, 22, 29, 36,
							43,  50, 57, 58, 51, 44, 37, 30,
							23,  31, 38, 45, 52, 59, 60, 53,
							46,  39, 47, 54, 61, 62, 55, 63 };
sfg init
{
	i=0;
	fin=0;
	qi=0;
	wadr=0;
}

sfg next_block {
	i=0;
	qi=0;
	wadr=0;
}

sfg no_read {
	rd3=0;
	ad3=0;
}

sfg fin_no {
	fin_quant = 0;
}

sfg no_write {
	wr4=0;
	ad4=0;
	dout=0;
}

sfg prepare_read {
	ad3=i;
	i=i+1;
	rd3=1;
}

sfg calculate_c{
	y = (x*cqt(qi)) >> 15;
	$display($dp, " quant_out: ",y,",");
	qi = qi+1;
}

sfg fin_yes {
	fin=1;
	fin_quant = 1;
}

sfg clear_fin {
	fin=0;
}

sfg flag_fin {
	fin_quant=fin;
}

sfg read {
	x=din;
}

sfg write {
	ad4=zigzag(wadr);
	wr4=1;
	wadr=wadr+1;
	dout=y;
}

}


fsm quantc_ctl(quantc) {
   	initial s0;
   	state s1,s2,s3,s4,s5,s6,s7,s8,s9;
   	@s0 (init,fin_no,no_write,no_read) -> s1;
	@s1 if(~start) then (no_read, no_write, flag_fin) -> s1;
  	    else (prepare_read, no_write, clear_fin, fin_no) -> s3;
	@s3 (prepare_read, read, no_write, flag_fin) -> s4;
	@s4 (prepare_read, read, calculate_c, no_write, flag_fin) -> s5;
	@s5 if(i==0) then (no_read, read, calculate_c, write, flag_fin) -> s6;
		else (prepare_read, read, calculate_c, write, flag_fin) -> s5;
	@s6 (no_read, calculate_c, write, flag_fin) -> s7;
	@s7 (no_read, write, flag_fin) -> s8;
	@s8 (no_read, no_write, next_block, flag_fin) -> s9;
	@s9 (no_read, no_write, fin_yes) -> s1;
}
dp quantu  : quantc
dp quantv  : quantc
