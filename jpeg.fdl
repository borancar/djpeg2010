/////// You need to specify XXX depending on your fixed-point refinement
/////// You need to specify XXX depending on your fixed-point refinement
/////// You need to specify XXX depending on your fixed-point refinement


#include "main.fdl"
#include "test_jpeg.fdl"
#include "camif.fdl"
#include "b1.fdl"
#include "rgbyuv.fdl"
#include "b2.fdl"
#include "mydct_fin2.fdl"
#include "b5.fdl"
#include "b3.fdl"
#include "quant.fdl"
#include "b4.fdl"
#include "hufbor.fdl"
#include "fdump2.fdl"
#include "b6.fdl"


dp jpeg     (  in datar : ns(8);
               in datag : ns(8);
               in datab : ns(8);
               in vsync : ns(1); // Camera control signals
               in hsync : ns(1);
               in oddeven : ns(1);
               out debug1 : ns(1);
               out debug2 : ns(1);
               out debug3 : ns(1);
               out debug4 : ns(1);
               out debug5 : ns(1);
               out debug6 : ns(1);
               out debug7 : ns(1);
               out debug8 : ns(1);
               out stream : ns(8))
{

  sig finish_8line, finish_rgbyuv, finish_dct_y1, finish_quant_y1, finish_huf : ns(1);
  sig bufsel1, bufsel2, bufsel3, bufsel4 : ns(1);
  sig start_rgbyuv, start_dct, start_quant, start_huf, start_fdump : ns(1);
  sig di1_r, di1_g, di1_b : ns(8);
  sig a1w_r, a1w_g, a1w_b : ns(9);
  sig w1_r,  w1_g,  w1_b  : ns(1);

  use camif ( datar, datag, datab, vsync, hsync, oddeven,
              bufsel1, finish_8line, a1w_r, a1w_g, a1w_b, w1_r, w1_g, w1_b, di1_r, di1_g, di1_b );

  use main ( finish_8line, finish_rgbyuv, finish_dct_y1, finish_quant_y1, finish_huf,
             bufsel2, bufsel3, bufsel4,
             start_rgbyuv, start_dct, start_quant, start_huf, start_fdump );

  sig do1_r, do1_g, do1_b : ns(8);
  sig a1r_r, a1r_g, a1r_b : ns(9);
  sig r1_r,  r1_g,  r1_b  : ns(1);

  use b1r  ( bufsel1, a1w_r, a1r_r, w1_r, r1_r, di1_r, do1_r );
  use b1g  ( bufsel1, a1w_g, a1r_g, w1_g, r1_g, di1_g, do1_g );
  use b1b  ( bufsel1, a1w_b, a1r_b, w1_b, r1_b, di1_b, do1_b );

  sig di2_y1, di2_y2, di2_u, di2_v : ns(8);
  sig a2w_y1, a2w_y2, a2w_u, a2w_v : ns(6);
  sig w2_y1,  w2_y2,  w2_u,  w2_v  : ns(1);

  use rgbyuv( start_rgbyuv, finish_rgbyuv,
              do1_r,  do1_g,  do1_b, 
              a1r_r,  a1r_g,  a1r_b,
              r1_r,   r1_g,   r1_b, 
              di2_y1, di2_y2, di2_u, di2_v,
              a2w_y1, a2w_y2, a2w_u, a2w_v, 
              w2_y1,  w2_y2,  w2_u,  w2_v );

  sig a2r_y1, a2r_y2, a2r_u, a2r_v : ns(6);
  sig r2_y1,  r2_y2,  r2_u,  r2_v  : ns(1);
  sig do2_y1, do2_y2, do2_u, do2_v : ns(15);

  use b2y1 ( bufsel2, a2w_y1, a2r_y1, w2_y1, r2_y1, di2_y1, do2_y1 );
  use b2y2 ( bufsel2, a2w_y2, a2r_y2, w2_y2, r2_y2, di2_y2, do2_y2 );
  use b2u  ( bufsel2, a2w_u,  a2r_u,  w2_u,  r2_u,  di2_u , do2_u );
  use b2v  ( bufsel2, a2w_v,  a2r_v,  w2_v,  r2_v,  di2_v , do2_v );

  sig a3r_y1,  a3r_y2, a3r_u, a3r_v : ns(6);
  sig r3_y1, r3_y2, r3_u, r3_v : ns(1);
  sig do3_y1,  do3_y2, do3_u, do3_v : tc(15);

  sig di3_y1, di3_y2, di3_u, di3_v : tc(15);
  sig a3w_y1, a3w_y2, a3w_u, a3w_v : ns(6);
  sig w3_y1,  w3_y2,  w3_u,  w3_v  : ns(1);
  sig do5_y1, do5_y2, do5_u, do5_v : tc(15);
  sig di5_y1, di5_y2, di5_u, di5_v : tc(15);
  sig a5_y1,  a5_y2,  a5_u,  a5_v  : ns(6);
  sig r5_y1,  r5_y2,  r5_u,  r5_v  : ns(1);
  sig w5_y1,  w5_y2,  w5_u,  w5_v  : ns(1);
  sig finish_dct_y2,finish_dct_u, finish_dct_v : ns(1);
 
  use dcty1( start_dct, finish_dct_y1, do2_y1, a2r_y1, r2_y1, di3_y1, a3w_y1, w3_y1, do5_y1, di5_y1, a5_y1, r5_y1, w5_y1 );
  use dcty2( start_dct, finish_dct_y2, do2_y2, a2r_y2, r2_y2, di3_y2, a3w_y2, w3_y2, do5_y2, di5_y2, a5_y2, r5_y2, w5_y2 );
  use dctu ( start_dct, finish_dct_u,  do2_u,  a2r_u,  r2_u,  di3_u,  a3w_u,  w3_u,  do5_u,  di5_u,  a5_u,  r5_u,  w5_u );
  use dctv ( start_dct, finish_dct_v,  do2_v,  a2r_v,  r2_v,  di3_v,  a3w_v,  w3_v,  do5_v,  di5_v,  a5_v,  r5_v,  w5_v );

  use b5y1 ( a5_y1, w5_y1, r5_y1, di5_y1, do5_y1 );
  use b5y2 ( a5_y2, w5_y2, r5_y2, di5_y2, do5_y2 );
  use b5u  ( a5_u,  w5_u,  r5_u,  di5_u , do5_u );
  use b5v  ( a5_v,  w5_v,  r5_v,  di5_v , do5_v );

  use b3y1 ( bufsel3, a3w_y1, a3r_y1, w3_y1, r3_y1, di3_y1, do3_y1 );
  use b3y2 ( bufsel3, a3w_y2, a3r_y2, w3_y2, r3_y2, di3_y2, do3_y2 );
  use b3u  ( bufsel3, a3w_u,  a3r_u,  w3_u,  r3_u,  di3_u , do3_u );
  use b3v  ( bufsel3, a3w_v,  a3r_v,  w3_v,  r3_v,  di3_v , do3_v );

  sig a4w_y1, a4w_y2, a4w_u, a4w_v : ns(6);
  sig  w4_y1,  w4_y2,  w4_u,  w4_v : ns(1);
  sig di4_y1, di4_y2, di4_u, di4_v : tc(15);
  sig a4r_y1, a4r_y2, a4r_u, a4r_v : ns(6);
  sig  r4_y1,  r4_y2,  r4_u,  r4_v : ns(1);
  sig do4_y1, do4_y2, do4_u, do4_v : tc(15);
  sig finish_quant_y2,finish_quant_u, finish_quant_v : ns(1);

  use quanty1( start_quant, finish_quant_y1, do3_y1, di4_y1, r3_y1, w4_y1, a3r_y1, a4w_y1 );
  use quanty2( start_quant, finish_quant_y2, do3_y2, di4_y2, r3_y2, w4_y2, a3r_y2, a4w_y2 );
  use quantu ( start_quant, finish_quant_u,  do3_u,  di4_u,  r3_u,  w4_u,  a3r_u,  a4w_u  );
  use quantv ( start_quant, finish_quant_v,  do3_v,  di4_v,  r3_v,  w4_v,  a3r_v,  a4w_v  );

  use b4y1 ( bufsel4, a4w_y1, a4r_y1, w4_y1, r4_y1, di4_y1, do4_y1 );
  use b4y2 ( bufsel4, a4w_y2, a4r_y2, w4_y2, r4_y2, di4_y2, do4_y2 );
  use b4u  ( bufsel4, a4w_u,  a4r_u,  w4_u,  r4_u,  di4_u,  do4_u );
  use b4v  ( bufsel4, a4w_v,  a4r_v,  w4_v,  r4_v,  di4_v,  do4_v );

  sig outen  : ns(1);
  sig outval : ns(16);
  sig outnb  : ns(7);

  use huf( start_huf, finish_huf, do4_y1, do4_y2, do4_u, do4_v,
             a4r_y1, a4r_y2, a4r_u, a4r_v, r4_y1, r4_y2, r4_u, r4_v, outen, outval, outnb );

  sig  a6       : ns(10);
  sig  w6, r6   : ns(1);
  sig  di6, do6 : ns(32);

  use fdump( start_fdump, a6, w6, r6, di6, stream, do6, outen, outval, outnb);

  use b6   ( a6, w6, r6, di6, do6 );

  sfg run{
           debug1 = finish_8line;
           debug2 = finish_rgbyuv;
           debug3 = finish_dct_y1;
           debug4 = finish_quant_y1;
           debug5 = finish_huf;
           debug6 = vsync;
           debug7 = hsync;
           debug8 = oddeven;
 }
	// === TRACE ===//
	$trace(datar,".datar.txt");
	$trace(vsync,".vsync.txt");
	$trace(hsync,".hsync.txt");
	
	$trace(di1_r,".di1_r.txt");
	$trace(w1_r,".w1_r.txt");
	$trace(a1w_r,".a1w_r.txt");
	
	$trace(oddeven,".oddeven.txt");
	$trace(bufsel1,".bufsel1.txt");
	$trace(bufsel2,".bufsel2.txt");
	$trace(bufsel3,".bufsel3.txt");
	$trace(bufsel4,".bufsel4.txt");
		
	$trace(finish_8line,".finish_8line.txt");
	$trace(start_rgbyuv,".start_rgbyuv.txt");
	$trace(finish_rgbyuv,".finish_rgbyuv.txt");
// 	
	$trace(do1_r,".do1_r.txt");
	$trace(r1_r,".r1_r.txt");
	$trace(a1r_r,".a1r_r.txt");
	
	$trace(do1_g,".do1_g.txt");
	$trace(r1_g,".r1_g.txt");
	$trace(a1r_g,".a1r_g.txt");
	
	$trace(di2_y1,".di2_y1.txt");
	$trace(a2w_y1,".a2w_y1.txt");
	$trace(w2_y1,".w2_y1.txt");
// 	
// 	// trace DCT
	$trace(start_dct,".start_dct.txt");	
	$trace(finish_dct_y1,".finish_dct_y1.txt");
// 	
	$trace(do2_y1,".do2_y1.txt");
	$trace(a2r_y1,".a2r_y1.txt");
	$trace(r2_y1,".r2_y1.txt");
	$trace(di3_y1,".di3_y1.txt");
	$trace(a3w_y1,".a3w_y1.txt");
	$trace(w3_y1,".w3_y1.txt");
	$trace(di5_y1,".di5_y1.txt");
	$trace(a5_y1,".a5_y1.txt");
	$trace(r5_y1,".r5_y1.txt");
	$trace(w5_y1,".w5_y1.txt");

// 	//trace QUANT
	$trace(start_quant,".start_quant.txt");
	$trace(finish_quant_y1,".finish_quant_y1.txt");
	$trace(do3_y1,".do3_y1.txt");
	$trace(di4_y1,".di4_y1.txt");
	$trace(r3_y1,".r3_y1.txt");
	$trace(w4_y1,".w4_y1.txt");
	$trace(a3r_y1,".a3r_y1.txt");
	$trace(a4w_y1,".a4w_y1.txt");
// 	//------ trace -------//
 	
// 	//trace HUF
	$trace(start_huf,".start_huf.txt");
	$trace(finish_huf,".finish_huf.txt");
	$trace(r4_y1,".r4_y1.txt");
	$trace(r4_y2,".r4_y2.txt");
	$trace(r4_u,".r4_u.txt");
	$trace(r4_v,".r4_v.txt");
	
	$trace(a4r_y1,".a4r_y1.txt");
	$trace(a4r_y2,".a4r_y2.txt");
	$trace(a4r_u,".a4r_u.txt");
	$trace(a4r_v,".a4r_v.txt");

	
	$trace(do4_y1,".do4_y1.txt");
	$trace(do4_y2,".do4_y2.txt");
	$trace(do4_u,".do4_u.txt");
	$trace(do4_v,".do4_v.txt");
	
	$trace(outen,".outen.txt");
	$trace(outval,".outval.txt");
	$trace(outnb,".outnb.txt");

	$trace(start_fdump,".start_fdump.txt");

	$trace(di6,".di6.txt");
	$trace(do6,".do6.txt");
	$trace(a6,".a6.txt");
	$trace(w6,".w6.txt");
	$trace(r6,".r6.txt");

	$trace(stream, "stream.txt");
}
hardwired t_jpeg(jpeg) { run; }

dp sys_jpeg {
  sig datar, datag, datab : ns(8);
  sig vsync, hsync, oddeven : ns(1);
  sig debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8 : ns(1);
  sig stream : ns(8);

  use jpeg (datar, datag, datab, vsync, hsync, oddeven, debug1, debug2, debug3, debug4, debug5, debug6, debug7, debug8, stream);
  use test_jpeg (datar, datag, datab, vsync, hsync, oddeven);
}
system S { sys_jpeg; }
