/////// You need to specify XXX depending on your fixed-point refinement
/////// You need to specify XXX depending on your fixed-point refinement
/////// You need to specify XXX depending on your fixed-point refinement


////// FDUMP DATA PATH //////
dp fdump (  in start_fdump : ns(1);
           out ad6    : ns(12);
           out wr6    : ns(1);
           out rd6    : ns(1);
           out di6    : ns(32);
           out stream : ns(8);
            in do6    : ns(32);
            in outen  : ns(1);
            in outval : ns(32);
            in outnb  : ns(7) )
{
	reg temp_data : ns(32);
	reg remaining_data : ns(32);
	reg remaining_bits : ns(7);
	reg filled : ns(6);
	reg curr_waddr, curr_raddr : ns(12);
	reg outen_r : ns(1);
	reg outval_r : ns(32);
	reg outnb_r : ns(7);
	reg out_data : ns(32);
	reg start_r : ns(1);
	reg last_written : ns(8);
	
	lookup header : ns(8) = {
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x10, 0x0c, 0x0b, 0x0a, 0x0c, 0x0e, 0x0e, 0x0d, 0x0e, 0x10, 0x18,
  0x13, 0x10, 0x11, 0x12, 0x18, 0x16, 0x16, 0x18, 0x1a, 0x28, 0x33, 0x3a,
  0x28, 0x1d, 0x25, 0x23, 0x31, 0x48, 0x40, 0x37, 0x38, 0x33, 0x39, 0x3c,
  0x3d, 0x37, 0x45, 0x57, 0x44, 0x40, 0x4e, 0x5c, 0x5f, 0x57, 0x51, 0x6d,
  0x50, 0x38, 0x3e, 0x67, 0x68, 0x67, 0x62, 0x70, 0x79, 0x71, 0x4d, 0x5c,
  0x78, 0x64, 0x67, 0x65, 0x63, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x11, 0x12,
  0x12, 0x18, 0x15, 0x18, 0x2f, 0x1a, 0x1a, 0x2f, 0x63, 0x42, 0x38, 0x42,
  0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
  0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
  0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
  0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
  0x63, 0x63, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x40, 0x00, 0x40, 0x03,
  0x01, 0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
  0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
  0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
  0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
  0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
  0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
  0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
  0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
  0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
  0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
  0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
  0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
  0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
  0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
  0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
  0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
  0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
  0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
  0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
  0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
  0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
  0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xFF,
  0xD9};
	
	always {
		outen_r = outen;
		outval_r = outval;
		outnb_r = outnb;
		start_r = start_fdump;
	}
	
	sfg no_write_stream {
		stream = 0;
	}
	
	reg header_addr : ns(10);
	
	sfg write_header {
		stream = header(header_addr);
		
		$display($hex, "JPEG: ",  header(header_addr)[7:4], header(header_addr)[3:0]);
		
		header_addr = header_addr + 1;
	}
	
	sfg no_b6 {
		ad6 = 0;
		rd6 = 0;
		wr6 = 0;
		di6 = 0;
	}
	
	sfg init {
		temp_data = 0;
		filled = 0;
		remaining_data = 0;
		remaining_bits = 0;
		last_written = 0x00;
		curr_raddr = 0;
		curr_waddr = 0;
	}
	
	sfg prepare_read_b6 {
		ad6 = curr_raddr;
		curr_raddr = curr_raddr + 1;
		rd6 = 1;
		wr6 = 0;
		di6 = 0;
	}
	
	sig to_write : ns(8);
	
	sfg write_stream {
		to_write = (out_data >> 24) & 0xFF;
		stream = to_write;
		last_written = to_write;
		$display($hex, "JPEG: ",  to_write[7:4], to_write[3:0]);
		out_data = out_data << 8;
	}
	
	sfg write_stream_00 {
		stream = 0x00;
		last_written = 0x00;
		$display($hex, "JPEG: ",  0, 0);
	}

	sfg read_b6 {
		out_data = do6;
	}

	sig total_bits : ns(8);
	sig remaining_add : ns(7);
	
	sfg add_huf_data {
		temp_data = temp_data | ((outval_r << (32 - outnb_r)) >> filled);
		total_bits = filled + outnb_r;		
		filled = total_bits[5] ? 32 : total_bits;
		remaining_add = total_bits[5] ? total_bits - 32 : 0;
		
		$display($hex, "HUFOUT: ", outval_r, ", ", $dec, outnb_r);
		$display($bin, "DEBUG outval: ", outval_r, $dec, ", outnb: ", outnb_r, $bin, " temp_data: ", temp_data, $dec, ", filled: ", filled);
		
		remaining_data = remaining_data | ((outval_r & (0xFFFFFFFF >> (32-remaining_add))) << (32-remaining_bits-remaining_add));
		remaining_bits = remaining_bits + remaining_add;
	}

	sfg write_huf_data {
		ad6 = curr_waddr;
		wr6 = 1;
		rd6 = 0;
		di6 = temp_data;
		temp_data = outen_r ? remaining_data | ((outval_r << (32 - outnb_r)) >> remaining_bits) : remaining_data;
		filled = outen_r ? remaining_bits + outnb_r : remaining_bits;
		
		remaining_data = 0;
		remaining_bits = 0;

		$display($bin, "DEBUG data to write: ",  temp_data, $dec, ", filled: ", filled, $hex, ", data in file: ", temp_data);
		$display($dec, "DEBUG address to write: ", curr_waddr);
		
		curr_waddr = curr_waddr + 1;
	}
}

////// FDUMP FSM //////
fsm fdump_ctl(fdump) {
   initial s0;
   state s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

	@s0 (init, no_write_stream, no_b6) -> s1;
	@s1 if(outen_r) then (add_huf_data, no_write_stream, no_b6) -> s2;
		else if((filled == 0) & start_r) then (no_b6, no_write_stream) -> s3;
		else if((filled != 0) & start_r) then (write_huf_data, no_write_stream) -> s3;
		else (no_b6, no_write_stream) -> s1;
	@s2 if(filled == 32) then (write_huf_data, no_write_stream) -> s1;
		else if(outen_r) then (add_huf_data, no_write_stream, no_b6) -> s2;
		else (no_write_stream, no_b6) -> s1;
		
	@s3 if(header_addr == 623) then (no_write_stream, prepare_read_b6) -> s4;
		else (write_header, no_b6) -> s3;
		
	@s4 if(curr_raddr == curr_waddr) then (write_header, no_b6) -> s9;
		else (no_b6, read_b6, no_write_stream) -> s5;
	@s5 if(last_written == 0xFF) then (write_stream_00, no_b6) -> s5;
		else (write_stream, no_b6) -> s6;
	@s6 if(last_written == 0xFF) then (write_stream_00, no_b6) -> s6;
		else (write_stream, no_b6) -> s7;
	@s7 if(last_written == 0xFF) then (write_stream_00, no_b6) -> s7;
		else (write_stream, no_b6) -> s8;
	@s8 if(last_written == 0xFF) then (write_stream_00, no_b6) -> s8;
		else (write_stream, prepare_read_b6) -> s4;
		
	@s9 (write_header, no_b6) -> s10;
	@s10 (no_write_stream, no_b6) -> s10;
}
